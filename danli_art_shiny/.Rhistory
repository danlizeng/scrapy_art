str(anscombe)
View(anscombe)
rm(list = ls())  # Clean up
x <- 0:10
x3 <- seq(10)
x4 <-  seq(30, 0 , by = -3)
x6 <- scan()
rm(list(ls()))
rm(list(ls())
rm(list(ls()))
rm(list = ls())
admit1 <- as.data.frame.table(UCBAdmissions)  # Coerces to data frame
View(admit1)
install.packages("RColorBrewer")
library(foreign)
install.packages("shiny")
shiny::runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
?colorRampPalette
View(nesRadar)
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
nes <- nes[,-1]
View(nes)
COL<-colorRampPalette(c(1:10))(nrow(myNesRadar)-2)
myNesRadar <- reactive({
nesRadar %>%
filter(Economy %in% c("10", "0", input$Country)) %>%
select(-Code)
})
COL<-colorRampPalette(c(1:10))(nrow(myNesRadar)-2)
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
?legend
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
nesRadar$Economy
nesRadar$Economy[-2]
nesRadar$Economy[-c(1,2)]
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
?legend
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
?radarchart
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
View(nesRadar)
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
shiny::runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
runApp('Desktop/Bootcamp/Project2/Entre')
shiny::runApp('Desktop/Bootcamp/Project2/Entre')
?addPolygons
shiny::runApp('Desktop/Bootcamp/Project2/Danli_shiny')
?addPolygons
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
shiny::runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
shiny::runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/bootcamp006_project/Project2-Shiny/jurgen-dejager')
shinyApp(ui = ui, server = function(input, output) { })
shinyApp(ui = ui, server = function(input, output) { })
View(aps)
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
View(aps)
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
library(ggplot2)
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
ggplot(data = aps,
aes(x = reorder(Economy, Perceived.Opportunities), y = Perceived.Opportynities)) +
geom_bar(stat = "identity")
ggplot(data = aps,
aes(x = reorder(Economy, Perceived.Opportunities), y = Perceived.Opportunities)) +
geom_bar(stat = "identity")
})
ggplot(data = aps,
aes(x = reorder(Economy, Perceived.Opportunities), y = Perceived.Opportunities)) +
geom_bar(stat = "identity")
ggplot(data = aps,
aes(x = reorder(Economy, desc(Perceived.Opportunities)), y = Perceived.Opportunities)) +
geom_bar(stat = "identity")
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
View(aps)
top_n(aps, 10, aps$Perceived.Opportunities)
test <- top_n(aps, 10, aps$Perceived.Opportunities)
View(test)
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
?selectInput
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
View(aps)
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
names(aps)
class(names(aps))
names(aps)[1]
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
?prop
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
test <- top_n(aps, 2, eval("Perceived.Opportunities"))
View(test)
test <- top_n(aps, 2, as.symbol("Perceived.Opportunities"))
test <- top_n(aps, 2, eval("Perceived.Opportunities"))
View(test)
names(aps)
test <- top_n(aps, 2, eval("Perceived.Capabilities"))
test <- top_n(aps, 2, eval("Perceived.Capabilities"))
top_n()
test <- top_n(aps, 2, Perceived.Capabilities)
test <- top_n(aps, 2, eval(Perceived.Capabilities))
test <- top_n(aps, 2, eval(asp$"Perceived.Capabilities"))
test <- top_n(aps, 2, eval(aps$"Perceived.Capabilities"))
test1 <- top_n(aps, 2, eval(aps$"Perceived.Capabilities"))
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
names(aps)
arg <- c("Perceived.Capabilities", "Perceived.Opportunities")
test1 <- top_n(aps, 2, eval(aps$args[1]))
eval(aps$args[1])
test1 <- top_n(aps, 2, eval(aps$(args[1]))
test1 <- top_n(aps, 2, eval(aps$args[[1]])
test1 <- top_n(aps, 2, eval(aps$args[[1]]))
test2 <- prop("x", as.symbol(arg[1]))
??prop
test1 <- top_n(aps, 2, eval(aps$arg[1]))
arg[1]
test1 <- top_n(aps, 2, eval(aps$(arg[1]))
test1 <- top_n(aps, 2, eval(aps$(arg[1])))
test1 <- top_n(aps, 2, eval(aps$[arg[1]]))
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
test1 <- top_n(aps, 2, aps$Perceived.Opportunities)
View(test1)
"Perceived.Opportunities"
top_n(aps, input$rank, Perceived.Opportunities)
top_n(aps, 2, aps$Perceived.Opportunities)
top_n(aps, 2, aps[['Perceived.Opportunities']])
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
head(cars)
top_n(cars, 3, dis)
top_n(cars, 3, dist)
top_n(cars, 6, dist)
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
?top_n
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
colnames(aps)
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
cars
top_n(cars, 6, dist)
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
?reorder
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
View(aps)
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
View(aps)
names(aps)
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
install.packages("DT")
library(DT)
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
?DT::dataTableOutput
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
runApp('Desktop/Bootcamp/Project2/Danli_shiny')
cor(cars) #Correlations.
summary(cars) #Five number summaries.
sapply(cars, sd) #Standard deviations.
cor(cars) #Correlations.
hist(cars$speed, xlab = "Speed in MPH", main = "Histogram of Speed")
hist(cars$dist, xlab = "Distance in Feet", main = "Histogram of Distance")
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2)
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
abline(beta0, beta1, lty = 2)
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2)
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2)
abline(beta0, beta1, lty = 2)
?abline
residuals = cars$dist - (beta0 + beta1*cars$speed)
sum(residuals)
segments(cars$speed, cars$dist,
cars$speed, (beta0 + beta1*cars$speed),
col = "red")
text(cars$speed - .5, cars$dist, round(residuals, 2), cex = 0.5)
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
summary(model) #All the summary information for the model in question. Reports:
confint(model) #Creating 95% confidence intervals for the model coefficients.
qqnorm(model$residuals)
qqline(model$residuals)
plot(model) #Note the addition of the loess smoother and scale-location plot
plot(model) #Note the addition of the loess smoother and scale-location plot
influencePlot(model)
library(car) #Companion to applied regression.
influencePlot(model)
model$fitted.values #Returns the fitted values.
newdata = data.frame(speed = c(15, 20, 25)) #Creating a new data frame to pass
predict(model, newdata, interval = "confidence") #Construct confidence intervals
newdata = data.frame(speed = 4:25)
conf.band = predict(model, newdata, interval = "confidence")
pred.band = predict(model, newdata, interval = "prediction")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2) #Plotting the regression line.
lines(newdata$speed, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(newdata$speed, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(newdata$speed, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(newdata$speed, pred.band[, 3], col = "red") #Plotting the upper prediction band.
legend("topleft", c("Regression Line", "Conf. Band", "Pred. Band"),
lty = c(2, 1, 1), col = c("black", "blue", "red"))
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value.
dist.bc = (cars$dist^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(dist.bc ~ cars$speed) #Creating a new regression based on the
summary(model.bc) #Assessing the output of the new model.
plot(model.bc) #Assessing the assumptions of the new model.
?boxCox
ran_imp_age <- impute(titanic$age, "random")
titanic <- titanic3
library(PASWR)
library(dplyr)
titanic <- titanic3
apply(titanic, 2, function(col_) sum(is.na(col_)) / nrow(titanic))
apply(titanic, 1, function(row_) sum(is.na(row_)) / ncol(titanic))  ### not sure if the question asks for this?
1 - sum(complete.cases(titanic)) / nrow(titanic)
sum(is.na(titanic)) / (nrow(titanic)*ncol(titanic))
library("VIM")
aggr(titanic)
library('dplyr')
artist <- read.csv('www/artist_final.csv', header = TRUE, stringsAsFactors = FALSE, na.strings=c("","NA"))
setwd("~/Desktop/Bootcamp/Project3_Scrapy/art/danli_art_shiny")
artist <- read.csv('www/artist_final.csv', header = TRUE, stringsAsFactors = FALSE, na.strings=c("","NA"))
# Create a function that switch artist & museums as values and keys
create_idx <- function(key, vals) {
for(val in vals) {
if(val %in% names(my_index)) {
my_index[[val]] <<- unique(c(my_index[[val]], key))
} else {
my_index[[val]] <<- key
}
}
}
my_index <- list()
for(i in 1:nrow(artist)) {
key = artist$artist[i]
vals = unlist(strsplit(artist$museums[i], ", "))
create_idx(key, vals)
}
artist <- read.csv('artist_cleaned.csv', header = TRUE, stringsAsFactors = FALSE, na.strings=c("","NA"))
nrow(artist) - sum(is.na(artist$genre))
artist <- filter(artist, is.na(artist$nationality) == FALSE)
artist$medium[is.na(artist$medium)] <- "Painter"
artist <- filter(artist, is.na(artist$born) == FALSE)
for(i in 1:nrow(artist)) {
if (artist$born[i] <= 100 & is.na(artist$born[i]) == FALSE) {
artist$born[i] <- artist$born[i]*100
}
}
artist$century <- 1:nrow(artist)
for(i in 1:nrow(artist)) {
if (is.na(artist$born[i])) {
artist$century[i] <-   NA
} else {
artist$century[i] <- artist$born[i] %/% 100
}
}
artist$museums[is.na(artist$museums)] <- "Unknown"
artist$firstName[artist$firstName  == "Sir"] <- NA
artist$firstName[artist$firstName  == "Master"] <- NA
artist$firstName[artist$firstName  == "The"] <- NA
for(i in 1:nrow(artist)){
to_replace <- paste0(artist$artist[i], ' at the ')
artist$museums[i] <-  gsub(to_replace, '', artist$museums[i])
}
artist_genre <- filter(artist, artist$century >= 11)
artist_genre <- filter(artist_genre, is.na(artist_genre$genre) == FALSE)
View(artist_genre)
View(artist_genre)
write.csv(artist_genre[-c('X.1', 'X_id', 'X'), ], file = "artist_final.csv")
artist_genre <- select(artist_genre, -c(X, X_id, X.1, details, death))
View(artist_genre)
write.csv(artist_genre, file = "artist_final.csv")
View(artist_genre)
artist <- read.csv('www/artist_final.csv', header = TRUE, stringsAsFactors = FALSE, na.strings=c("","NA"))
write.csv(artist_genre, file = "artist_final.csv")
artist <- read.csv('www/artist_final.csv', header = TRUE, stringsAsFactors = FALSE, na.strings=c("","NA"))
library('dplyr')
artist <- read.csv('www/artist_final.csv', header = TRUE, stringsAsFactors = FALSE, na.strings=c("","NA"))
# Create a function that switch artist & museums as values and keys
create_idx <- function(key, vals) {
for(val in vals) {
if(val %in% names(my_index)) {
my_index[[val]] <<- unique(c(my_index[[val]], key))
} else {
my_index[[val]] <<- key
}
}
}
my_index <- list()
for(i in 1:nrow(artist)) {
key = artist$genre[i]
vals = unlist(strsplit(artist$museums[i], ", "))
create_idx(key, vals)
}
